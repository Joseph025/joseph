from flask import Flask,request,jsonify,Response
import requests
import json
import traceback
import logging
import logging.config
import configparser
from SortAlgorithm.model_interface import pred,init_model
import pickle
import hashlib

app = Flask(__name__)

config = configparser.ConfigParser()
config.read("./config/config.ini",encoding="utf-8-sig")

def init_log():
    global logger
    logging.config.fileConfig("./log/log-config")
    logger = logging.getLogger()

def init_size():
    global SIZE 
    SIZE = config.getint("OPTION","size")

def init():
    # 初始化加载算法模型
    init_model()
    # 初始化日志
    init_log()
    # 初始化SIZE
    init_size()
    # POST请求ES
def call_es(req,from_num,size_num,preference='default'):
    req["from"] = from_num
    req["size"] = size_num
    response = requests.post(config.get("OPTION","url")+'?preference='+preference, 
                            headers={"content-type":"application/json; charset=UTF-8"},
                            data=json.dumps(req))
    return response.json()

# 对hits数组进行重排序
def sort_algorithm(hits,summary):
    # 调用算法模块进行排序，返回排序后的id
    hit_arr = pred(hits,summary)
    Dict = {}
    cnt = 0
    for Id in hit_arr:
        Dict[Id]=cnt
        cnt += 1
    # logger.info(Dict)
    # 根据排序后的id对hits数组重排序
    # new_hits = [0] * SIZE
    # for hit in hits:
    #     new_hits[Dict[hit["sort"][1]]]=hit
    return sorted(hits, key=lambda hit: Dict[hit["_id"]])

#判断是should 还是must
def isReqShould(req):
    if req["query"]["bool"].get("should") is not None:
	    return True
    else:
	    return False

#获得所有查询条件
def getAllMatchs(req):
    if isReqShould(req):
        return req["query"]["bool"]["should"]
    else:
        return req["query"]["bool"]["must"]
		
#找到用户请求的具体数值，可能是should，可能是must
def get_reqParameter(req, key):
    matchs = getAllMatchs(req)

    for match in matchs:
        if match["match"].get(key) is not None:
            return match["match"].get(key)
    return None

#删除Defect Number
def rm_defectNo(req):	
    matchs = getAllMatchs(req)

    for index, match in enumerate(matchs):
        if match["match"].get("defectNo") is not None:
            del matchs[index]

@app.route("%s"%(config.get("OPTION","api")),methods=['POST'])
def optimization_ws():
    try:
        if request.json==None:
            return Response(u"400")

        if request.method =="POST":
            # 获取POST请求IDMS的参数
            req = request.json
            # 如果DefectNo 不是数字，做删除操作
            defectNo = get_reqParameter(req, "defectNo")
            if not defectNo == None and not defectNo.isnumeric():
                    rm_defectNo(req)
            summary = get_reqParameter(req, "summary")
            summery_md5 = hashlib.md5(summary.encode('utf-8')).hexdigest()
                        # 根据req["sort"]判断是否需要重排序
            if req["sort"]==[{"_score": "desc"},{"defectID": "desc"}]:
                if req["from"] >= SIZE:
                    rps = call_es(req,req["from"],req["size"],summery_md5)
                    return jsonify(rps)
                else:
                    if (req["from"] + req["size"]) <= config.getint("OPTION","size"):
                        old_from = req["from"]
                        old_size = req["size"]
                        rps = call_es(req,0,SIZE,summery_md5)
                        if len(rps["hits"]["hits"]) == 0:
                           return jsonify(rps)
                        hits_sort = sort_algorithm(rps["hits"]["hits"],summary)
                        rps["hits"]["hits"] = hits_sort[old_from:old_size+old_from]
                        return jsonify(rps)
                    else:
                        old_from = req["from"]
                        old_size = req["size"]
                        rps = call_es(req,0,old_from+old_size,summery_md5)
                        if len(rps["hits"]["hits"]) == 0:
                            return jsonify(rps)
                        hits_sort = sort_algorithm(rps["hits"]["hits"][:SIZE],summary)
                        rps["hits"]["hits"] = hits_sort[old_from:SIZE] + rps["hits"]["hits"][SIZE:old_from+old_size]
                        return jsonify(rps)
            else:
                rps = call_es(req,req["from"],req["size"],summery_md5)
                return jsonify(rps)
        else:
            return "Request method Error: Please request again by POST"
    except Exception as e:
                logger.info(e)

if __name__ == '__main__':

    # 初始化
    init()

    app.run( host=config.get("OPTION","host"),
             port=config.getint("OPTION","port"),
             debug=True)
